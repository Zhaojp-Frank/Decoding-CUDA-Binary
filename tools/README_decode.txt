========================
=========DECODE=========
========================

This program is used to analyze NVIDIA ISA encodings, and generate assembler code.

This tool has been tested on ISAs with versions between 3.2 and 6.2.
It is not yet compatible with newer architectures, as we need to update our structures to support 16-byte instructions.

This program has three running modes:

./decode assembly.txt < oldPersistent.dat > newPersistent.dat
The above command will analyze the code in file assembly.txt (generated by our bin2asm tool with the -hex flag).
It will combine the analysis with encodings in oldPersistent.dat, and output new encodings to newPersistent.dat.

./decode -probe assembly.txt < persistent.dat > bitflip.txt
The above command will generate bit-flipped code based on analysis of assembly.txt plus encodings in persistent.dat.
The bit-flipped code in bitflip.txt can be injected into an executable using our asm2bin tool.
After injection, new assembly for analysis can be retrieved with bin2asm using the -hex flag.

./decode -final assembly.txt < persistent.dat > assembler.cpp
The above command will generate an assembler based on analysis of assembly.txt plus encodings in persistent.dat.
This assembler can be placed inside a C++ function; see our binary50.cpp and binary35.cpp files in src/ for examples.

Note that during the first run for a given architecture, since no persistent data exists, you should just enter -1 into stdin.